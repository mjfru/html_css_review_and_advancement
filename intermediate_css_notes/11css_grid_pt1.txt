-- CSS Grid --
With grid, another new-ish essential layout tool, we have lots of different properties to pick and choose from.
It helps us build grid-based layouts of all different shapes and sizes.
Grid also makes it incredibly easy to make a page responsive as well.

Similar to flex-box, we make a parent element a grid container and we can then move, change, and reposition its grid item children around in that container. 

How is it different from Flexbox?
Do you need to control the layout in rows OR columns...or rows AND columns?

Flexbox = row OR column
Grid = row AND column


-- Enabling CSS Grid --
Similar to flexbox, we have to make the parent container a grid container!

.container {
    display: grid;
}

We can also use - display: inline-grid; -- as well if we want the outside of the grid container to be an inline element.

Next, we specify how many columns and rows we want.

.container {
    display: grid;  <-- with just this, it's one column
    grid-template-columns: 1fr 1fr;
}

...What's an 'fr'?
It stands for 'fraction' and represents an even proportion of the grid which is useful when we don't want to calculate % widths!
This is calculated by looking at the width of your parent container and choosing the correct proportions.
1fr 2fr 1fr would result in two smaller columns (1 fraction of the box) flanking a column doubly as large.

Other units can also be mixed and matched...such as:
grid-template-comlumns: 150px 1fr 150px;
The 1fr here will take up whatever is leftover!


-- Grid Template Rows --
This is the same as columns...but with rows!

.container {
    display: grid;
    grid-template-rows: 100px 100px 100px;
}

This will make 3 rows in our grid, all 100px tall.
Of course, fr units, a mixture of units, are still valid when working with rows.

If we want to built a proper grid, we utilize both templates.
grid-template-columsn: 1fr 1fr;
grid-template-rows: 1fr 2fr 1fr 2fr;


-- Grid-Template Shorthand --
Grid-template is a shorthand property we can use instead of specifying both grid-template-rows and grid-template-columns on seperate lines.
The syntax looks like this:

.container {
    display: grid;
    grid-template: 1fr 1fr (ROWS) / 1fr 1fr 1fr (COLUMNS)   (same layout as the above example)
}

* Note: Do not mix this up with grid-template-areas! That'll be covered later.


-- The minmax() Function --
The minmax() function allows you to define a minimum and a maximum value for the width a column should span or the height a row should span.

.container {
    display: grid;
    grid-template-columns: minmax(100px, 1fr); (min first, then maximum)
}

If we want to have more than one column...

...{
    grid-template-columns: minmax(500px, 700px) minmax(500px, 700px)
}

And the syntax is the exact same for making rows like this as well.
It's best to hardcode a pixel amount or percentage for the minimum and something that can scale for the maximum, a percentage or a fraction.

Using auto for the maximum value will allow the row/column to grow to fit whatever content you have instead.


-- The repeat() Function --
Repeat() lets you define many columns or rows with certain values with ease, instead of typing the same thing over and over.

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);  (repeat 3 times with the space of 1fr)
    grid-template-rows: repeat(2, 1fr);     (repeat 2 times with the space of 1fr)
}

...{
    grid-template-columns: repeat(5, minmax(100px, 250px));
}

...{
    grid-template: repeat(2, 1fr) / repeat(5, minmax(100px, 250px));
}


-- The fit-content() Function --
The fit-content() function tells a Grid Track to be as wide/tall as its content, but with a max value that it shouldn't exceed.
It takes a bunch of different values like px, %, etc., as a max.

.container {
    display: grid;
    grid-template-columns: fit-content(300px) fit-content(500px) fit-content(300px)
    grid-template-rows:
}

* "Take up the normal size of your content but don't go above this threshold."


-- Grid Gaps --
Grid Containers come with gap styles to easily control the spacing between Grid items, such as column-gap and row-gap.
Again, this goes on the grid container and not the items themselves.

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 1fr 1fr;
    column-gap: 16px;
    row-gap: 16px;
}

Naturally, there is also a shorthand way we can specify both column and row gaps together:
grid-gap: 16px; <-- for row and column gaps.
grid-gap: 10px 40px <-- rows are 10px, column gaps are 40px.
This can also be used as just 'gap'.